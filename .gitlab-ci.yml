---
.only_on_code_change: &only_on_code_change
  only:
    changes:
      - '**/*.go'
      - '**/*.mod'
      - '**/*.sum'
      - '**/Dockefile'

.only_on_helm_change: &only_on_helm_change
  only:
    changes:
      - '**/charts/**/*'

.only_on_markdown_change: &only_on_markdown_change
  only:
    changes:
      - '**/*.md'

.only_on_yaml_change: &only_on_yaml_change
  only:
    changes:
      - '**/*.yml'
      - '**/*.yaml'

include:
  - project: 'klausklausen/templates'
    ref: main
    file: 'test.yml'
  - project: 'klausklausen/templates'
    ref: main
    file: 'deploy.yml'
  - project: 'klausklausen/templates'
    ref: main
    file: 'build.yml'
  - project: 'klausklausen/templates'
    ref: main
    file: 'package.yml'
  - project: 'klausklausen/templates'
    ref: main
    file: 'deploy.yml'
  - project: 'klausklausen/templates'
    ref: main
    file: 'lint.yml'
  - project: 'klausklausen/templates'
    ref: main
    file: 'security.yml'

variables:
  TAG: $CI_COMMIT_BRANCH
  GO_IMAGE: golang:1.23

stages:
  - security
  - lint
  - test
  - build
  - package
  - deploy
  - publish

# go-lint:
#   stage: test
#   image: golangci/golangci-lint:v1.62.2
#   script:
#     - golangci-lint run -v
#   allow_failure: true

# go-test:
#   stage: test
#   image: $GO_IMAGE
#   script:
#     - go test -v ./...

# # lint
# markdown lint:
#   extends: .markdown_lint
#   <<: *only_on_markdown_change
# yaml lint:
#   extends: .yaml_lint
#   <<: *only_on_yaml_change
# prettier lint:
#   extends: .prettier
# helm lint:
#   extends: .helm_lint
#   variables:
#     HELM_CHART_DIR: charts
#   <<: *only_on_helm_change
# go-lint:
#   extends: .go_lint
#   <<: *only_on_code_change

# # test
# render helm chart:
#   extends: .render_helm_chart
#   variables:
#     HELM_CHART_DIR: charts
#   <<: *only_on_helm_change
# run_test_suite:
#   stage: test
#   image: golang:1.23
#   script:
#     - TEST_ZONE_NAME=example.com make test
#   <<: *only_on_code_change

# # security
# package scan:
#   extends: .package_scan
# secret scan:
#   extends: .secret_scan

# # build
# build image:
#   extends: .image_multi_arch
#   variables:
#     IMAGE_NAME: ${NEXUS_REPO_HOST}/${CI_PROJECT_NAME}
#     IMAGE_TAG: ${CI_COMMIT_SHORT_SHA}
#     BUILD_TARGET: prod
#   <<: *only_on_code_change

# # package
# package image:
#   extends: .image_tag
#   variables:
#     IMAGE_NAME: ${NEXUS_REPO_HOST}/${CI_PROJECT_NAME}
#   tags:
#     - amd64
#   <<: *only_on_code_change
# package helm:
#   extends: .package_helm_chart
#   variables:
#     HELM_CHART_DIR: charts
#     PACKAGE_NAME: cert-manager-webhook-ipv64
#   <<: *only_on_helm_change

# deploy
deploy helm:
  extends: .deploy_helm_chart
  variables:
    HELM_CHART_DIR: charts
    PACKAGE_NAME: cert-manager-webhook-ipv64
  <<: *only_on_helm_change

# publish
publish image to github:
  stage: publish
  variables:
    GIT_STRATEGY: none
    IMAGE_NAME: ${NEXUS_REPO_HOST}/${CI_PROJECT_NAME}
    TAG: ${CI_COMMIT_SHORT_SHA}
  # pull image from registry, retag it for github, push it to github
  # without docker-in-docker
  image: docker:dind
  before_script:
    - docker login ${NEXUS_REPO_HOST} -u $NEXUS_USER -p $NEXUS_TOKEN
    - docker login ghcr.io -u $GITHUB_USERNAME -p $GITHUB_CONTAINER_TOKEN
  script:
    - docker pull 
      ${NEXUS_REPO_HOST}/${CI_PROJECT_NAME}:${CI_COMMIT_SHORT_SHA}
    - docker tag 
      ${NEXUS_REPO_HOST}/${CI_PROJECT_NAME}:${CI_COMMIT_SHORT_SHA}
      ghcr.io/theklausklausen/cert-manager-webhook-ipv64:${CI_PIPELINE_IID}
    - docker tag 
      ${NEXUS_REPO_HOST}/${CI_PROJECT_NAME}:${CI_COMMIT_SHORT_SHA}
      ghcr.io/theklausklausen/cert-manager-webhook-ipv64:latest
    - docker push 
      ghcr.io/theklausklausen/cert-manager-webhook-ipv64:${CI_PIPELINE_IID}
  after_script:
    - docker logout ${NEXUS_REPO_HOST}
    - docker logout ghcr.io
  <<: *only_on_code_change
